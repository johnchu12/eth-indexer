// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/repository/mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "hw/internal/model"
	pg "hw/pkg/pg"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockRepository) BeginTransaction(ctx context.Context) (pg.PgxTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(pg.PgxTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockRepositoryMockRecorder) BeginTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockRepository)(nil).BeginTransaction), ctx)
}

// CreatePointsHistory mocks base method.
func (m *MockRepository) CreatePointsHistory(ctx context.Context, pointsHistory *model.PointsHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePointsHistory", ctx, pointsHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePointsHistory indicates an expected call of CreatePointsHistory.
func (mr *MockRepositoryMockRecorder) CreatePointsHistory(ctx, pointsHistory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePointsHistory", reflect.TypeOf((*MockRepository)(nil).CreatePointsHistory), ctx, pointsHistory)
}

// CreateSwapHistory mocks base method.
func (m *MockRepository) CreateSwapHistory(ctx context.Context, swapHistory *model.SwapHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwapHistory", ctx, swapHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSwapHistory indicates an expected call of CreateSwapHistory.
func (mr *MockRepositoryMockRecorder) CreateSwapHistory(ctx, swapHistory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwapHistory", reflect.TypeOf((*MockRepository)(nil).CreateSwapHistory), ctx, swapHistory)
}

// CreateToken mocks base method.
func (m *MockRepository) CreateToken(ctx context.Context, token *model.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockRepositoryMockRecorder) CreateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockRepository)(nil).CreateToken), ctx, token)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, userId string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, userId)
}

// GetLeaderboard mocks base method.
func (m *MockRepository) GetLeaderboard(ctx context.Context) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderboard", ctx)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaderboard indicates an expected call of GetLeaderboard.
func (mr *MockRepositoryMockRecorder) GetLeaderboard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderboard", reflect.TypeOf((*MockRepository)(nil).GetLeaderboard), ctx)
}

// GetPointsHistory mocks base method.
func (m *MockRepository) GetPointsHistory(ctx context.Context, account, token string) ([]model.PointsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointsHistory", ctx, account, token)
	ret0, _ := ret[0].([]model.PointsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPointsHistory indicates an expected call of GetPointsHistory.
func (mr *MockRepositoryMockRecorder) GetPointsHistory(ctx, account, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointsHistory", reflect.TypeOf((*MockRepository)(nil).GetPointsHistory), ctx, account, token)
}

// GetSwapTotalUsd mocks base method.
func (m *MockRepository) GetSwapTotalUsd(ctx context.Context, account, token string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapTotalUsd", ctx, account, token)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapTotalUsd indicates an expected call of GetSwapTotalUsd.
func (mr *MockRepositoryMockRecorder) GetSwapTotalUsd(ctx, account, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapTotalUsd", reflect.TypeOf((*MockRepository)(nil).GetSwapTotalUsd), ctx, account, token)
}

// GetTokenByAddress mocks base method.
func (m *MockRepository) GetTokenByAddress(ctx context.Context, address string) (*model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByAddress", ctx, address)
	ret0, _ := ret[0].(*model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByAddress indicates an expected call of GetTokenByAddress.
func (mr *MockRepositoryMockRecorder) GetTokenByAddress(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByAddress", reflect.TypeOf((*MockRepository)(nil).GetTokenByAddress), ctx, address)
}

// GetUserByAddress mocks base method.
func (m *MockRepository) GetUserByAddress(ctx context.Context, address string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAddress", ctx, address)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAddress indicates an expected call of GetUserByAddress.
func (mr *MockRepositoryMockRecorder) GetUserByAddress(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAddress", reflect.TypeOf((*MockRepository)(nil).GetUserByAddress), ctx, address)
}

// GetUserSwapSummary mocks base method.
func (m *MockRepository) GetUserSwapSummary(ctx context.Context, account string) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSwapSummary", ctx, account)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSwapSummary indicates an expected call of GetUserSwapSummary.
func (mr *MockRepositoryMockRecorder) GetUserSwapSummary(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSwapSummary", reflect.TypeOf((*MockRepository)(nil).GetUserSwapSummary), ctx, account)
}

// GetUserSwapSummaryLast7Days mocks base method.
func (m *MockRepository) GetUserSwapSummaryLast7Days(ctx context.Context, referenceTime time.Time, token string) ([]model.UserSwapPercentage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSwapSummaryLast7Days", ctx, referenceTime, token)
	ret0, _ := ret[0].([]model.UserSwapPercentage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSwapSummaryLast7Days indicates an expected call of GetUserSwapSummaryLast7Days.
func (mr *MockRepositoryMockRecorder) GetUserSwapSummaryLast7Days(ctx, referenceTime, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSwapSummaryLast7Days", reflect.TypeOf((*MockRepository)(nil).GetUserSwapSummaryLast7Days), ctx, referenceTime, token)
}

// IsOnboardingTaskCompleted mocks base method.
func (m *MockRepository) IsOnboardingTaskCompleted(ctx context.Context, account string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOnboardingTaskCompleted", ctx, account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOnboardingTaskCompleted indicates an expected call of IsOnboardingTaskCompleted.
func (mr *MockRepositoryMockRecorder) IsOnboardingTaskCompleted(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOnboardingTaskCompleted", reflect.TypeOf((*MockRepository)(nil).IsOnboardingTaskCompleted), ctx, account)
}

// UpsertUserPoints mocks base method.
func (m *MockRepository) UpsertUserPoints(ctx context.Context, address string, point float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserPoints", ctx, address, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUserPoints indicates an expected call of UpsertUserPoints.
func (mr *MockRepositoryMockRecorder) UpsertUserPoints(ctx, address, point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserPoints", reflect.TypeOf((*MockRepository)(nil).UpsertUserPoints), ctx, address, point)
}
