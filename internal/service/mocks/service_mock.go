// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=internal/service/mocks/service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "hw/internal/model"
	reflect "reflect"

	ethclient "github.com/ethereum/go-ethereum/ethclient"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AccumulateUserPoints mocks base method.
func (m *MockService) AccumulateUserPoints(ctx context.Context, token, user, description string, point float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccumulateUserPoints", ctx, token, user, description, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccumulateUserPoints indicates an expected call of AccumulateUserPoints.
func (mr *MockServiceMockRecorder) AccumulateUserPoints(ctx, token, user, description, point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccumulateUserPoints", reflect.TypeOf((*MockService)(nil).AccumulateUserPoints), ctx, token, user, description, point)
}

// CreateAccount mocks base method.
func (m *MockService) CreateAccount(ctx context.Context, account *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockServiceMockRecorder) CreateAccount(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockService)(nil).CreateAccount), ctx, account)
}

// CreateSwapHistory mocks base method.
func (m *MockService) CreateSwapHistory(ctx context.Context, history *model.SwapHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwapHistory", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSwapHistory indicates an expected call of CreateSwapHistory.
func (mr *MockServiceMockRecorder) CreateSwapHistory(ctx, history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwapHistory", reflect.TypeOf((*MockService)(nil).CreateSwapHistory), ctx, history)
}

// CreateToken mocks base method.
func (m *MockService) CreateToken(ctx context.Context, token *model.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockServiceMockRecorder) CreateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockService)(nil).CreateToken), ctx, token)
}

// GetLeaderboard mocks base method.
func (m *MockService) GetLeaderboard(ctx context.Context) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderboard", ctx)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaderboard indicates an expected call of GetLeaderboard.
func (mr *MockServiceMockRecorder) GetLeaderboard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderboard", reflect.TypeOf((*MockService)(nil).GetLeaderboard), ctx)
}

// GetOrCreateAccount mocks base method.
func (m *MockService) GetOrCreateAccount(ctx context.Context, accountId string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAccount", ctx, accountId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateAccount indicates an expected call of GetOrCreateAccount.
func (mr *MockServiceMockRecorder) GetOrCreateAccount(ctx, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAccount", reflect.TypeOf((*MockService)(nil).GetOrCreateAccount), ctx, accountId)
}

// GetOrCreateToken mocks base method.
func (m *MockService) GetOrCreateToken(ctx context.Context, client *ethclient.Client, tokenId string, blockNumber int64) (*model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateToken", ctx, client, tokenId, blockNumber)
	ret0, _ := ret[0].(*model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateToken indicates an expected call of GetOrCreateToken.
func (mr *MockServiceMockRecorder) GetOrCreateToken(ctx, client, tokenId, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateToken", reflect.TypeOf((*MockService)(nil).GetOrCreateToken), ctx, client, tokenId, blockNumber)
}

// GetPointsHistory mocks base method.
func (m *MockService) GetPointsHistory(ctx context.Context, account, token string) ([]model.PointsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointsHistory", ctx, account, token)
	ret0, _ := ret[0].([]model.PointsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPointsHistory indicates an expected call of GetPointsHistory.
func (mr *MockServiceMockRecorder) GetPointsHistory(ctx, account, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointsHistory", reflect.TypeOf((*MockService)(nil).GetPointsHistory), ctx, account, token)
}

// GetSwapTotalUsd mocks base method.
func (m *MockService) GetSwapTotalUsd(ctx context.Context, account, token string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapTotalUsd", ctx, account, token)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapTotalUsd indicates an expected call of GetSwapTotalUsd.
func (mr *MockServiceMockRecorder) GetSwapTotalUsd(ctx, account, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapTotalUsd", reflect.TypeOf((*MockService)(nil).GetSwapTotalUsd), ctx, account, token)
}

// GetTokenByAddress mocks base method.
func (m *MockService) GetTokenByAddress(ctx context.Context, token string) (*model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByAddress", ctx, token)
	ret0, _ := ret[0].(*model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByAddress indicates an expected call of GetTokenByAddress.
func (mr *MockServiceMockRecorder) GetTokenByAddress(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByAddress", reflect.TypeOf((*MockService)(nil).GetTokenByAddress), ctx, token)
}

// GetUserSwapSummary mocks base method.
func (m *MockService) GetUserSwapSummary(ctx context.Context, account string) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSwapSummary", ctx, account)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSwapSummary indicates an expected call of GetUserSwapSummary.
func (mr *MockServiceMockRecorder) GetUserSwapSummary(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSwapSummary", reflect.TypeOf((*MockService)(nil).GetUserSwapSummary), ctx, account)
}

// GetUserSwapSummaryLast7Days mocks base method.
func (m *MockService) GetUserSwapSummaryLast7Days(ctx context.Context, account string) ([]model.UserSwapPercentage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSwapSummaryLast7Days", ctx, account)
	ret0, _ := ret[0].([]model.UserSwapPercentage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSwapSummaryLast7Days indicates an expected call of GetUserSwapSummaryLast7Days.
func (mr *MockServiceMockRecorder) GetUserSwapSummaryLast7Days(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSwapSummaryLast7Days", reflect.TypeOf((*MockService)(nil).GetUserSwapSummaryLast7Days), ctx, account)
}

// IsOnboardingTaskCompleted mocks base method.
func (m *MockService) IsOnboardingTaskCompleted(ctx context.Context, account string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOnboardingTaskCompleted", ctx, account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOnboardingTaskCompleted indicates an expected call of IsOnboardingTaskCompleted.
func (mr *MockServiceMockRecorder) IsOnboardingTaskCompleted(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOnboardingTaskCompleted", reflect.TypeOf((*MockService)(nil).IsOnboardingTaskCompleted), ctx, account)
}
