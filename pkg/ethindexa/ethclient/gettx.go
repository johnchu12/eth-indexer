package ethclient

import (
	"context"
	"fmt"
	"reflect"
	"time"

	"hw/pkg/request"

	"github.com/ethereum/go-ethereum/common"
)

// This package is used to fix "transaction type not supported" issue.

// AutoGenerated represents the JSON-RPC response structure.
type AutoGenerated struct {
	JSONRPC string                 `json:"jsonrpc"`
	ID      int                    `json:"id"`
	Result  GetTransactionResponse `json:"result"`
}

// GetTransactionResponse represents the transaction details returned by the API.
type GetTransactionResponse struct {
	BlockHash            string        `json:"blockHash"`
	BlockNumber          string        `json:"blockNumber"`
	Hash                 string        `json:"hash"`
	YParity              string        `json:"yParity,omitempty"`
	AccessList           []interface{} `json:"accessList,omitempty"`
	TransactionIndex     string        `json:"transactionIndex"`
	Type                 string        `json:"type"`
	Nonce                string        `json:"nonce"`
	Input                string        `json:"input"`
	R                    string        `json:"r"`
	S                    string        `json:"s"`
	ChainID              string        `json:"chainId"`
	V                    string        `json:"v"`
	Gas                  string        `json:"gas"`
	MaxPriorityFeePerGas string        `json:"maxPriorityFeePerGas,omitempty"`
	From                 string        `json:"from"`
	To                   string        `json:"to"`
	MaxFeePerGas         string        `json:"maxFeePerGas,omitempty"`
	Value                string        `json:"value"`
	GasPrice             string        `json:"gasPrice"`
}

// GetHash returns the transaction hash as a common.Hash.
func (tx GetTransactionResponse) GetHash() common.Hash {
	return common.HexToHash(tx.Hash)
}

// GetTransactionByHash retrieves a transaction by its hash, using local cache if available.
func (c *Client) GetTransactionByHash(ctx context.Context, hash string) (AutoGenerated, error) {
	var res AutoGenerated
	var errResp ErrorResponse

	err := c.localCache.GetFunc(ctx, c.localCache.FormatKey(c.Name, "eth_getTransactionByHash", hash), &res, 3*time.Second, func(ctx context.Context) (interface{}, error) {
		var res AutoGenerated
		reqBody := fmt.Sprintf(`{"jsonrpc":"2.0","method":"eth_getTransactionByHash","params":["%s"],"id":1}`, hash)

		_, reqErr := request.NewClient(
			request.Timeout("8s"),
			request.SetRetryCount(0),
			request.Header(map[string]string{
				"Content-Type": "application/json",
			}),
		).
			SetResult(&res).
			SetError(&errResp).
			SetBody(reqBody).
			Do("POST", c.RPCURL)

		// Check for API response errors.
		if !reflect.DeepEqual(errResp, ErrorResponse{}) {
			return nil, fmt.Errorf("API error code %d: %s", errResp.Error.Code, errResp.Error.Message)
		}

		// Check for request execution errors.
		if reqErr != nil {
			return nil, fmt.Errorf("request failed: %w", reqErr)
		}

		return res, nil // Return the value itself to avoid double pointer
	})

	return res, err
}
